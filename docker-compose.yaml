version: '3.5'

services:
  app:
    hostname: 'product'
    container_name: 'product-app'
    build:
      dockerfile: product/Dockerfile
      context: .
    networks:
      - local-network
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_USER_PWD: postgres
      POSTGRES_HOST: postgres
    depends_on:
      - postgres
    volumes:
      - .:/app

  kafka:
    image: 'vectorized/redpanda:v21.11.14'
    hostname: "kafka"
    container_name: "kafka"
    command:
      - redpanda
      - start
      - --smp
      - '1'
      - --reserve-memory
      - 0M
      - --overprovisioned
      - --node-id
      - '0'
      - --kafka-addr
      - INTERNAL://0.0.0.0:9092,OUTSIDE://0.0.0.0:9094,PLAINTEXT://0.0.0.0:9093
      - --advertise-kafka-addr
      - INTERNAL://kafka:9092,OUTSIDE://host.docker.internal:9094,PLAINTEXT://kafka:9093
    extra_hosts:
      - "host.docker.internal:172.17.0.1"
    networks:
      - local-network

  schema-registry:
    image: 'confluentinc/cp-schema-registry:7.0.1'
    hostname: "schema-registry"
    container_name: "schema-registry"
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_HOST_NAME: 'schema-registry'
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka:9093"
    networks:
      - local-network

  postgres:
    container_name: postgres-app
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    networks:
      - local-network
    restart: unless-stopped

networks:
  local-network:
    name: network-app
